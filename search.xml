<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker网络</title>
      <link href="/2023/08/20/dockerNetwork/"/>
      <url>/2023/08/20/dockerNetwork/</url>
      
        <content type="html"><![CDATA[<h1 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h1><h2 id="查看所有docker网络"><a href="#查看所有docker网络" class="headerlink" title="查看所有docker网络"></a>查看所有docker网络</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p><img src="/../images/dockerNetwork1.png" alt="img.png">  </p><h2 id="网络模式"><a href="#网络模式" class="headerlink" title="网络模式"></a>网络模式</h2><ol><li>bridge: 桥接 docker （默认）</li><li>none：不配置网络</li><li>host：和宿主机共享网络</li><li>container:：容器网络连通（用的少）</li></ol><h2 id="创建网络"><a href="#创建网络" class="headerlink" title="创建网络"></a>创建网络</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span><br></pre></td></tr></table></figure><ol><li>–driver bridge：桥接模式</li><li>–subnet 192.168.0.0&#x2F;16：子网地址</li><li>–gateway 192.168.0.1：网关地址（类似路由器地址）</li><li>mynet：网络名称<br>查看我创建的网络<br><img src="/../images/dockerNetwork2.png" alt="img.png"></li></ol><h2 id="将容器启动放在自定义网络"><a href="#将容器启动放在自定义网络" class="headerlink" title="将容器启动放在自定义网络"></a>将容器启动放在自定义网络</h2><p>–net mynet 使用指定网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p:80:80 --name c_tomcat --net mynet tomcat-test</span><br></pre></td></tr></table></figure><h2 id="使用容器名称ping"><a href="#使用容器名称ping" class="headerlink" title="使用容器名称ping"></a>使用容器名称ping</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it tomcat-net01 ping tomcat-net02</span><br></pre></td></tr></table></figure><h1 id="网络连接"><a href="#网络连接" class="headerlink" title="网络连接"></a>网络连接</h1><h2 id="不同的网络下的容器相互连接、mynet网络与tomcat01容器连通"><a href="#不同的网络下的容器相互连接、mynet网络与tomcat01容器连通" class="headerlink" title="不同的网络下的容器相互连接、mynet网络与tomcat01容器连通"></a>不同的网络下的容器相互连接、mynet网络与tomcat01容器连通</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network connect mynet network tomcat01</span><br></pre></td></tr></table></figure><p>执行后mynet会将tomcat01的网络加入到mynet网络下</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea连接docker</title>
      <link href="/2023/08/20/ideaConnectDocker/"/>
      <url>/2023/08/20/ideaConnectDocker/</url>
      
        <content type="html"><![CDATA[<h1 id="docker配置"><a href="#docker配置" class="headerlink" title="docker配置"></a>docker配置</h1><h2 id="修改docker-service文件"><a href="#修改docker-service文件" class="headerlink" title="修改docker.service文件"></a>修改docker.service文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure><h2 id="需要修改的部分："><a href="#需要修改的部分：" class="headerlink" title="需要修改的部分："></a>需要修改的部分：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br></pre></td></tr></table></figure><p>修改为 -&gt;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock</span><br></pre></td></tr></table></figure><h2 id="配置生效并重启docker"><a href="#配置生效并重启docker" class="headerlink" title="配置生效并重启docker"></a>配置生效并重启docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="开放2375端口"><a href="#开放2375端口" class="headerlink" title="开放2375端口"></a>开放2375端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=2375/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h1 id="idea配置"><a href="#idea配置" class="headerlink" title="idea配置"></a>idea配置</h1><h2 id="搜索安装docker插件"><a href="#搜索安装docker插件" class="headerlink" title="搜索安装docker插件"></a>搜索安装docker插件</h2><p><img src="/../images/ideaConnectDocker1.png" alt="img.png"></p><h2 id="配置docker连接ip"><a href="#配置docker连接ip" class="headerlink" title="配置docker连接ip"></a>配置docker连接ip</h2><p><img src="/../images/ideaConnectDocker2.png" alt="img.png"></p><h2 id="查看docker镜像"><a href="#查看docker镜像" class="headerlink" title="查看docker镜像"></a>查看docker镜像</h2><p><img src="/../images/ideaConnectDocker3.png" alt="img.png"></p><h1 id="配置SSL"><a href="#配置SSL" class="headerlink" title="配置SSL"></a>配置SSL</h1><h2 id="创建一个目录用于存储生成的证书和秘钥"><a href="#创建一个目录用于存储生成的证书和秘钥" class="headerlink" title="创建一个目录用于存储生成的证书和秘钥"></a>创建一个目录用于存储生成的证书和秘钥</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /docker-ca &amp;&amp; <span class="built_in">cd</span> /docker-ca</span><br></pre></td></tr></table></figure><h2 id="使用openssl创建CA证书私钥，期间需要输入两次密码，生成文件为ca-key-pem"><a href="#使用openssl创建CA证书私钥，期间需要输入两次密码，生成文件为ca-key-pem" class="headerlink" title="使用openssl创建CA证书私钥，期间需要输入两次密码，生成文件为ca-key.pem"></a>使用openssl创建CA证书私钥，期间需要输入两次密码，生成文件为ca-key.pem</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -aes256 -out ca-key.pem 4096</span><br></pre></td></tr></table></figure><h2 id="根据私钥创建CA证书，期间需要输入上一步设置的私钥密码，然后依次输入国家是-CN，省例如是Guangdong、市Guangzhou、组织名称、组织单位、姓名或服务器名、邮件地址，都可以随意填写，生成文件为ca-pem（注意证书有效期）"><a href="#根据私钥创建CA证书，期间需要输入上一步设置的私钥密码，然后依次输入国家是-CN，省例如是Guangdong、市Guangzhou、组织名称、组织单位、姓名或服务器名、邮件地址，都可以随意填写，生成文件为ca-pem（注意证书有效期）" class="headerlink" title="根据私钥创建CA证书，期间需要输入上一步设置的私钥密码，然后依次输入国家是 CN，省例如是Guangdong、市Guangzhou、组织名称、组织单位、姓名或服务器名、邮件地址，都可以随意填写，生成文件为ca.pem（注意证书有效期）"></a>根据私钥创建CA证书，期间需要输入上一步设置的私钥密码，然后依次输入国家是 CN，省例如是Guangdong、市Guangzhou、组织名称、组织单位、姓名或服务器名、邮件地址，都可以随意填写，生成文件为ca.pem（注意证书有效期）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -x509 -days 365 -key ca-key.pem -sha256 -out ca.pem</span><br></pre></td></tr></table></figure><h2 id="创建服务端私钥，生成文件为server-key-pem"><a href="#创建服务端私钥，生成文件为server-key-pem" class="headerlink" title="创建服务端私钥，生成文件为server-key.pem"></a>创建服务端私钥，生成文件为server-key.pem</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out server-key.pem 4096</span><br></pre></td></tr></table></figure><h2 id="创建服务端证书签名请求文件，用于CA证书给服务端证书签名。IP需要换成自己服务器的IP地址，或者域名都可以。生成文件server-csr"><a href="#创建服务端证书签名请求文件，用于CA证书给服务端证书签名。IP需要换成自己服务器的IP地址，或者域名都可以。生成文件server-csr" class="headerlink" title="创建服务端证书签名请求文件，用于CA证书给服务端证书签名。IP需要换成自己服务器的IP地址，或者域名都可以。生成文件server.csr"></a>创建服务端证书签名请求文件，用于CA证书给服务端证书签名。IP需要换成自己服务器的IP地址，或者域名都可以。生成文件server.csr</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -subj <span class="string">&quot;/CN=你的服务器ip&quot;</span> -sha256 -new -key server-key.pem -out server.csr</span><br></pre></td></tr></table></figure><h2 id="配置白名单，用多个用逗号隔开，例如：-IP-192-168-0-1-IP-0-0-0-0，这里需要注意，虽然0-0-0-0可以匹配任意，但是仍然需要配置你的服务器IP，如果省略会造成错误"><a href="#配置白名单，用多个用逗号隔开，例如：-IP-192-168-0-1-IP-0-0-0-0，这里需要注意，虽然0-0-0-0可以匹配任意，但是仍然需要配置你的服务器IP，如果省略会造成错误" class="headerlink" title="配置白名单，用多个用逗号隔开，例如： IP:192.168.0.1,IP:0.0.0.0，这里需要注意，虽然0.0.0.0可以匹配任意，但是仍然需要配置你的服务器IP，如果省略会造成错误"></a>配置白名单，用多个用逗号隔开，例如： IP:192.168.0.1,IP:0.0.0.0，这里需要注意，虽然0.0.0.0可以匹配任意，但是仍然需要配置你的服务器IP，如果省略会造成错误</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> subjectAltName = IP:你的服务器ip,IP:0.0.0.0 &gt;&gt; extfile.cnf</span><br></pre></td></tr></table></figure><h2 id="将Docker守护程序密钥的扩展使用属性设置为仅用于服务器身份验证"><a href="#将Docker守护程序密钥的扩展使用属性设置为仅用于服务器身份验证" class="headerlink" title="将Docker守护程序密钥的扩展使用属性设置为仅用于服务器身份验证"></a>将Docker守护程序密钥的扩展使用属性设置为仅用于服务器身份验证</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> extendedKeyUsage = serverAuth &gt;&gt; extfile.cnf</span><br></pre></td></tr></table></figure><h2 id="创建CA证书签名好的服务端证书，期间需要输入CA证书私钥密码，生成文件为server-cert-pem"><a href="#创建CA证书签名好的服务端证书，期间需要输入CA证书私钥密码，生成文件为server-cert-pem" class="headerlink" title="创建CA证书签名好的服务端证书，期间需要输入CA证书私钥密码，生成文件为server-cert.pem"></a>创建CA证书签名好的服务端证书，期间需要输入CA证书私钥密码，生成文件为server-cert.pem</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -days 365 -sha256 -<span class="keyword">in</span> server.csr -CA ca.pem -CAkey ca-key.pem \-CAcreateserial -out server-cert.pem -extfile extfile.cnf</span><br></pre></td></tr></table></figure><h2 id="创建客户端私钥，生成文件为key-pem"><a href="#创建客户端私钥，生成文件为key-pem" class="headerlink" title="创建客户端私钥，生成文件为key.pem"></a>创建客户端私钥，生成文件为key.pem</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out key.pem 4096</span><br></pre></td></tr></table></figure><h2 id="创建客户端证书签名请求文件，用于CA证书给客户证书签名，生成文件client-csr"><a href="#创建客户端证书签名请求文件，用于CA证书给客户证书签名，生成文件client-csr" class="headerlink" title="创建客户端证书签名请求文件，用于CA证书给客户证书签名，生成文件client.csr"></a>创建客户端证书签名请求文件，用于CA证书给客户证书签名，生成文件client.csr</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -subj <span class="string">&#x27;/CN=client&#x27;</span> -new -key key.pem -out client.csr</span><br></pre></td></tr></table></figure><h2 id="要使密钥适合客户端身份验证，请创建扩展配置文件"><a href="#要使密钥适合客户端身份验证，请创建扩展配置文件" class="headerlink" title="要使密钥适合客户端身份验证，请创建扩展配置文件"></a>要使密钥适合客户端身份验证，请创建扩展配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> extendedKeyUsage = clientAuth &gt;&gt; extfile.cnf</span><br></pre></td></tr></table></figure><h2 id="创建CA证书签名好的客户端证书，期间需要输入CA证书私钥密码，生成文件为cert-pem"><a href="#创建CA证书签名好的客户端证书，期间需要输入CA证书私钥密码，生成文件为cert-pem" class="headerlink" title="创建CA证书签名好的客户端证书，期间需要输入CA证书私钥密码，生成文件为cert.pem"></a>创建CA证书签名好的客户端证书，期间需要输入CA证书私钥密码，生成文件为cert.pem</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -days 365 -sha256 -<span class="keyword">in</span> client.csr -CA ca.pem -CAkey ca-key.pem \-CAcreateserial -out cert.pem -extfile extfile.cnf</span><br></pre></td></tr></table></figure><h2 id="删除不需要的文件，两个证书签名请求"><a href="#删除不需要的文件，两个证书签名请求" class="headerlink" title="删除不需要的文件，两个证书签名请求"></a>删除不需要的文件，两个证书签名请求</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -v client.csr server.csr</span><br></pre></td></tr></table></figure><h2 id="修改证书为只读权限保证证书安全"><a href="#修改证书为只读权限保证证书安全" class="headerlink" title="修改证书为只读权限保证证书安全"></a>修改证书为只读权限保证证书安全</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> -v 0400 ca-key.pem key.pem server-key.pem</span><br><span class="line"><span class="built_in">chmod</span> -v 0444 ca.pem server-cert.pem cert.pem</span><br></pre></td></tr></table></figure><h2 id="归集服务器证书"><a href="#归集服务器证书" class="headerlink" title="归集服务器证书"></a>归集服务器证书</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> server-*.pem  /etc/docker/ &amp;&amp; <span class="built_in">cp</span> ca.pem /etc/docker/</span><br></pre></td></tr></table></figure><h2 id="最终生成文件如下，有了它们我们就可以进行基于TLS的安全访问了"><a href="#最终生成文件如下，有了它们我们就可以进行基于TLS的安全访问了" class="headerlink" title="最终生成文件如下，有了它们我们就可以进行基于TLS的安全访问了"></a>最终生成文件如下，有了它们我们就可以进行基于TLS的安全访问了</h2><ol><li>ca.pem CA证书</li><li>ca-key.pem CA证书私钥</li><li>server-cert.pem 服务端证书</li><li>server-key.pem 服务端证书私钥</li><li>cert.pem 客户端证书</li><li>key.pem 客户端证书私钥.</li></ol><h2 id="配置Docker支持TLS"><a href="#配置Docker支持TLS" class="headerlink" title="配置Docker支持TLS"></a>配置Docker支持TLS</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure><h2 id="修改以ExecStart开头的配置，开启TLS认证，并配置好CA证书、服务端证书和服务端私钥"><a href="#修改以ExecStart开头的配置，开启TLS认证，并配置好CA证书、服务端证书和服务端私钥" class="headerlink" title="修改以ExecStart开头的配置，开启TLS认证，并配置好CA证书、服务端证书和服务端私钥"></a>修改以ExecStart开头的配置，开启TLS认证，并配置好CA证书、服务端证书和服务端私钥</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd --tlsverify --tlscacert=/etc/docker/ca.pem --tlscert=/etc/docker/server-cert.pem --tlskey=/etc/docker/server-key.pem -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure><h2 id="重新加载让配置生效"><a href="#重新加载让配置生效" class="headerlink" title="重新加载让配置生效"></a>重新加载让配置生效</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="重启docker"><a href="#重启docker" class="headerlink" title="重启docker"></a>重启docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker restart</span><br></pre></td></tr></table></figure><h2 id="在客户端测试连接"><a href="#在客户端测试连接" class="headerlink" title="在客户端测试连接"></a>在客户端测试连接</h2><p>保存相关客户端的pem文件到本地<br><img src="/../images/ideaConnectDocker4.png" alt="img.png"><br>IDEA-&gt;Preferences-&gt;Bulild, Execution,Deployment-&gt;Docker-&gt;TCP socket<br><img src="/../images/ideaConnectDocker5.png" alt="img.png"><br>到此，Docker对外开放2375端口再也不怕被攻击了！</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好，世界</title>
      <link href="/2023/08/20/hello-world/"/>
      <url>/2023/08/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>欢迎使用 <a href="https://hexo.io/">Hexo</a>! 这是你的第一篇文章。检查 <a href="https://hexo.io/docs/">文档</a> 了解更多信息。如果您在使用Hexo时遇到任何问题, 你可以在 <a href="https://hexo.io/docs/troubleshooting.html">故障排除</a> 或者你可以问我 <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="创建新帖子"><a href="#创建新帖子" class="headerlink" title="创建新帖子"></a>创建新帖子</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CentOs安装Docker</title>
      <link href="/2023/08/18/installDocker/"/>
      <url>/2023/08/18/installDocker/</url>
      
        <content type="html"><![CDATA[<h2 id="检查内核版本，必须是3-10及以上"><a href="#检查内核版本，必须是3-10及以上" class="headerlink" title="检查内核版本，必须是3.10及以上"></a>检查内核版本，必须是3.10及以上</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> -r</span><br></pre></td></tr></table></figure><h2 id="yum-包更新到最新"><a href="#yum-包更新到最新" class="headerlink" title="yum 包更新到最新"></a>yum 包更新到最新</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure><h2 id="卸载旧版（如果你已经安装过docker）"><a href="#卸载旧版（如果你已经安装过docker）" class="headerlink" title="卸载旧版（如果你已经安装过docker）"></a>卸载旧版（如果你已经安装过docker）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker  docker-common docker-selinux docker-engine</span><br></pre></td></tr></table></figure><h2 id="安装需要的软件包，-yum-util-提供yum-config-manager功能，另外两个是devicemapper驱动依赖的"><a href="#安装需要的软件包，-yum-util-提供yum-config-manager功能，另外两个是devicemapper驱动依赖的" class="headerlink" title="安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的"></a>安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><h2 id="设置yum源"><a href="#设置yum源" class="headerlink" title="设置yum源"></a>设置yum源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h2 id="安装docker，出现输入的界面都按-y"><a href="#安装docker，出现输入的界面都按-y" class="headerlink" title="安装docker，出现输入的界面都按 y"></a>安装docker，出现输入的界面都按 y</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce</span><br></pre></td></tr></table></figure><h2 id="查看docker版本，验证是否验证成功"><a href="#查看docker版本，验证是否验证成功" class="headerlink" title="查看docker版本，验证是否验证成功"></a>查看docker版本，验证是否验证成功</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><h2 id="设置开机自动启动docker"><a href="#设置开机自动启动docker" class="headerlink" title="设置开机自动启动docker"></a>设置开机自动启动docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h2 id="配置镜像加速器"><a href="#配置镜像加速器" class="headerlink" title="配置镜像加速器"></a>配置镜像加速器</h2><p>进入阿里云：<a href="https://account.aliyun.com/">https://account.aliyun.com</a> 登录账号，搜索：<br><img src="/../images/img2124213123213.png" alt="img.png"><br>获取加速地址并配置<br><img src="/../images/img.png" alt="img.png"></p><ol><li>在etc里面创建docker文件夹</li><li>创建daemon.json文件，写入自己的加速地址</li><li>守护进程重新加载</li><li>重新启动docker</li></ol><h4 id="替换自己的加速地址复制执行即可"><a href="#替换自己的加速地址复制执行即可" class="headerlink" title="替换自己的加速地址复制执行即可"></a>替换自己的加速地址复制执行即可</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://uomb8t0n.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue介绍</title>
      <link href="/2022/11/13/My-New-Post/"/>
      <url>/2022/11/13/My-New-Post/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-Vue？"><a href="#什么是-Vue？" class="headerlink" title="什么是 Vue？"></a>什么是 Vue？</h2><p>Vue (发音为 &#x2F;vjuː&#x2F;，类似 view) 是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。</p><p>下面是一个最基本的示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span></span><br><span class="line">    Count is: &#123;&#123; count &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的示例展示了 Vue 的两个核心功能：</p><ul><li><strong>声明式：</strong> Vue 基于标准 HTML 拓展了一套模板语法，使得我们可以声明式地描述最终输出的 HTML 和 JavaScript 状态之间的关系。</li><li><strong>响应性</strong> Vue 会自动跟踪 JavaScript 状态并在其发生变化时响应式地更新 DOM。</li></ul><p>你可能已经有了些疑问——先别急，在后续的文档中我们会详细介绍每一个细节。现在，请继续看下去，以确保你对 Vue 作为一个框架到底提供了什么有一个宏观的了解。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
